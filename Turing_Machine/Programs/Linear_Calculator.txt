//: Linear_Calculator :
//: This program is much more complex than the others. It calculates the function of x, where the function of x is linear. :
//: [f(x) = mx + b]. However, b is always 0. The value of m will be whatever 4-bit binary number is in the 3rd grouping of bits from the left. :
//: For this example, m is 3. This machine also has the limitation of only being able to count to 16. This could be easily expanded on by adding a couple more states. :
//: The output (fourth group of bits from the left) should be read when the farthest bit to the right is 1. :
//: x is represented by the first group of bits from the left. :
//:
code:0000=1111=0011=0000=0000=0:
codeStart:16:
stateStart:0:
headStart:15:
//:
state[0]:(800,0,1)(800,1,1)(800,=,1):
state[800]:(800,0,1)(800,1,1)(801,=,-1):
//:
state[900]:(901,0,1)(900,1,1)(1,=,1):
state[901]:(902,0,1)(902,1,1)(902,=,1):
state[902]:(903,0,1)(903,1,1)(903,=,1):
state[903]:(904,0,1)(904,1,1)(904,=,1):
state[904]:(905,0,1)(905,1,1)(905,=,1):
state[905]:(911,0,-1)(911,0,-1)(911,0,-1):
state[911]:(912,0,-1)(912,1,-1)(912,=,-1):
state[912]:(913,0,-1)(913,1,-1)(913,=,-1):
state[913]:(900,0,-1)(900,1,-1)(900,=,-1):
//:
state[600]:(600,0,-1)(601,1,-1)(501,=,-1):
state[601]:(602,0,-1)(602,1,-1)(602,=,-1):
state[602]:(603,0,-1)(603,1,-1)(603,=,-1):
state[603]:(604,0,-1)(604,1,-1)(604,=,-1):
state[604]:(605,0,-1)(605,1,-1)(605,=,-1):
state[605]:(611,1,1)(611,1,1)(611,1,1):
state[611]:(612,0,1)(612,1,1)(612,=,1):
state[612]:(613,0,1)(613,1,1)(613,=,1):
state[613]:(600,0,1)(600,1,1)(600,=,1):
//:
state[501]:(501,0,-1)(501,1,-1)(502,=,-1):
state[502]:(502,0,-1)(502,1,-1)(2,=,-1):
//:
state[1]:(1,0,1)(1,1,1)(3,=,1):
state[3]:(3,0,1)(3,1,1)(4,=,1):
state[4]:(4,0,1)(4,0,1)(5,=,1):
state[5]:(5,0,1)(5,1,1)(600,=,-1):
//:
state[2]:(2,1,-1)(10,0,1)(300,=,1):
state[10]:(10,0,1)(10,1,1)(100,=,1):
state[100]:(100,0,1)(100,1,1)(101,=,-1):
state[101]:(101,0,-1)(61,1,1)(2,=,-1):
state[61]:(62,0,1)(62,1,1)(62,=,1):
state[62]:(63,0,1)(63,1,1)(63,=,1):
state[63]:(64,0,1)(64,1,1)(64,=,1):
state[64]:(65,0,1)(65,1,1)(65,=,1):
//:
state[300]:(300,0,1)(300,1,1)(301,=,1):
state[301]:(301,0,1)(301,1,1)(302,=,1):
state[302]:(302,0,1)(302,1,1)(303,=,1):
state[303]:(303,0,1)(303,1,1)(311,=,1):
//:
state[311]:(311,1,-1)(312,0,-1)(311,=,1):
state[312]:(320,0,-1)(320,1,-1)(320,=,-1):
//:
state[320]:(320,0,-1)(320,1,-1)(321,=,-1):
state[321]:(321,0,-1)(321,1,-1)(322,=,-1):
state[322]:(322,0,-1)(322,1,-1)(323,=,-1):
state[323]:(323,0,-1)(323,1,-1)(801,=,-1):
//:
state[65]:(161,1,-1)(76,0,-1)(65,=,-1):
state[76]:(162,1,-1)(87,0,-1)(65,=,-1):
state[87]:(163,1,-1)(98,0,-1)(65,=,-1):
state[98]:(164,1,-1)(999,0,-1)(65,=,-1):
//:
state[161]:(162,0,-1)(162,1,-1)(162,=,-1):
state[162]:(163,0,-1)(163,1,-1)(163,=,-1):
state[163]:(164,0,-1)(164,1,-1)(164,=,-1):
state[164]:(165,0,-1)(165,1,-1)(165,=,-1):
state[165]:(101,0,-1)(101,1,-1)(101,=,-1):
//:
state[801]:(983,1,-1)(801,0,-1)(983,=,-1):
state[983]:(983,0,-1)(983,1,-1)(900,=,1):